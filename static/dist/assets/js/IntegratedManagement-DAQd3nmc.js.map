{"version":3,"file":"IntegratedManagement-DAQd3nmc.js","sources":["../../../src/components/NetworkGraph.vue","../../../src/views/IntegratedManagement.vue"],"sourcesContent":["<template>\n  <el-card  shadow=\"never\" class=\"network-graph\">\n    <template #header>\n      <div class=\"card-header\">\n        <span>路由拓扑图</span>\n        <el-button type=\"primary\" @click=\"refreshGraph\">刷新</el-button>\n      </div>\n    </template>\n    <v-chart class=\"chart\" :option=\"option\" autoresize />\n  </el-card>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, watch, nextTick, onUnmounted } from 'vue'\nimport { use } from 'echarts/core'\nimport { CanvasRenderer } from 'echarts/renderers'\nimport { GraphChart } from 'echarts/charts' \nimport type { ProxyBase as Proxy, UserGroup, RouteScheme } from '../api/apiTypes'\nimport {\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n} from 'echarts/components'\nimport VChart from 'vue-echarts'\n\nuse([\n  CanvasRenderer,\n  GraphChart,\n  TitleComponent,\n  TooltipComponent,\n  LegendComponent\n])\n \n\ninterface GraphNode {\n  id: string\n  name: string\n  symbolSize: number | [number, number]\n  symbol?: string\n  path?: (string | number)[][]\n  category: number\n  value?: number\n  itemStyle: {\n    color: string\n  }\n  x?: number\n  y?: number\n  fixed?: boolean\n}\n\ninterface GraphLink {\n  source: string\n  target: string\n  info?: string\n  value: number\n}\n\nconst props = defineProps<{\n  inboundProxies: Proxy[]\n  outboundProxies: Proxy[]\n  userGroups: UserGroup[]\n  routeSchemes: RouteScheme[]\n}>()\n\nconst option = ref<ECOption>({\n  title: { \n    top: 0,\n    left: 'center'\n  },\n  tooltip: {\n    trigger: 'item',\n    formatter: (params: any) => {\n      if (params.dataType === 'node') {\n        return `${params.data.name}`\n      } else if (params.dataType === 'edge') {\n        if (params.data.info) {\n          return `${params.data.info}`\n        } else {\n          return `${params.data.source} -> ${params.data.target}`\n        }\n      }\n    }\n  },\n  legend: {\n    data: [\n      {\n        name: '入站代理',\n        icon: 'circle',\n        itemStyle: {\n          color: '#4CAF50'\n        }\n      },\n      {\n        name: '用户组',\n        icon: 'circle',\n        itemStyle: {\n          color: '#2196F3'\n        }\n      },\n      {\n        name: '路由方案',\n        icon: 'circle',\n        itemStyle: {\n          color: '#FF9800'\n        }\n      },\n      {\n        name: '出站代理',\n        icon: 'circle',\n        itemStyle: {\n          color: '#9C27B0'\n        }\n      }\n    ],  \n  },\n  animationDurationUpdate: 150,\n  animationEasingUpdate: 'quinticInOut' as const,\n  series: [\n    {\n      type: 'graph',\n      layout: 'none',\n      data: [] as GraphNode[],\n      links: [] as GraphLink[], \n      categories: [\n        { name: '入站代理', itemStyle: { color: '#4CAF50' } },\n        { name: '用户组', itemStyle: { color: '#2196F3' } },\n        { name: '路由方案', itemStyle: { color: '#FF9800' } },\n        { name: '出站代理', itemStyle: { color: '#9C27B0' } }\n      ],\n      label: {\n        show: true,\n        position: 'bottom',\n        formatter: '{b}',\n        backgroundColor: 'transparent',\n        borderWidth: 0,\n        color: '#333',\n        fontSize: 12,\n        distance: 10\n      },\n      lineStyle: {\n        color: '#999',\n        width: 2,\n        curveness: 0.1\n      },\n      emphasis: {\n        focus: 'adjacency',\n        lineStyle: {\n          width: 4\n        }\n      }, \n    }\n  ]\n})\n\n// 监听数据变化\nwatch(\n  [() => props.inboundProxies, () => props.outboundProxies, () => props.userGroups, () => props.routeSchemes],\n  () => {\n    nextTick(() => {\n      generateGraphData()\n    })\n  },\n  { deep: true }\n)\n\nconst generateGraphData = () => {\n  console.log('Generating graph data with:', {\n    inboundProxies: props.inboundProxies,\n    userGroups: props.userGroups,\n    routeSchemes: props.routeSchemes,\n    outboundProxies: props.outboundProxies\n  })\n  \n\n  const nodes: GraphNode[] = []\n  const links: GraphLink[] = []\n\n  // 计算每列节点的垂直位置\n  let chart_width:number = parseInt(getComputedStyle(document.querySelector('.chart') as HTMLElement).width) \n  let chart_height:number = parseInt(getComputedStyle(document.querySelector('.chart') as HTMLElement).height)\n  let totalHeight:number = 550 * chart_height / chart_width\n  let max_node_count:number =  Math.max(props.inboundProxies.length, props.outboundProxies.length, props.userGroups.length, props.routeSchemes.length)\n \n  let spacing:number = totalHeight / (max_node_count - 1)\n   console.log('max_node_count:', max_node_count)\n  const calculateYPositions = (count: number) => {\n    if (count <= 1) return [totalHeight / 2] // 单个节点居中\n    const positions: number[] = [] \n    let node_range:number = spacing * (count - 1)\n    let startY:number = totalHeight / 2 - node_range / 2\n    for (let i = 0; i < count; i++) {\n      positions.push(startY + spacing * i)\n    }\n    return positions\n  }\n\n  // 添加入站代理节点（第一列）\n  const inboundPositions = calculateYPositions(props.inboundProxies.length)\n  props.inboundProxies.forEach((proxy, index) => {\n    nodes.push({\n      id: `inbound-${proxy.id}`,\n      name: proxy.id,\n      symbolSize: 40,\n      category: 0,\n      value: proxy.enabled ? 1 : 0,\n      itemStyle: {\n        color: proxy.enabled ? '#4CAF50' : '#BDBDBD'\n      },\n      x: 100,\n      y: inboundPositions[index],\n      fixed: true\n    })\n  })\n\n  // 添加用户组节点（第二列）\n  const groupPositions = calculateYPositions(props.userGroups.length)\n  props.userGroups.forEach((group, index) => {\n    const groupNodeId = `group-${group.id}`\n    nodes.push({\n      id: groupNodeId,\n      name: group.id,\n      symbolSize: 40,\n      category: 1,\n      itemStyle: {\n        color: '#2196F3'\n      },\n      x: 300,\n      y: groupPositions[index],\n      fixed: true\n    })\n\n    // 连接入站代理到用户组\n    group.inboundProxyIds.forEach(proxyId => {\n      links.push({\n        source: `inbound-${proxyId}`,\n        target: groupNodeId,\n        value: 1\n      })\n    })\n  })\n\n  // 添加路由方案节点（第三列）\n  const schemePositions = calculateYPositions(props.routeSchemes.length)\n  props.routeSchemes.forEach((scheme, index) => {\n    const schemeNodeId = `scheme-${scheme.id}`\n    nodes.push({\n      id: schemeNodeId,\n      name: scheme.id,\n      symbolSize: 40,\n      category: 2,\n      itemStyle: {\n        color: scheme.enabled ? '#FF9800' : '#BDBDBD'\n      },\n      x: 500,\n      y: schemePositions[index],\n      fixed: true\n    })\n\n    // 从路由规则中获取出站代理\n    scheme.rules?.forEach(rule => {\n      rule.outbounds.forEach(proxyId => {\n        links.push({\n          source: schemeNodeId,\n          info: \"rule: \" + rule.priority + \" - \" + rule.name,\n          target: `outbound-${proxyId}`,\n          value: 1\n        })\n      })\n    })\n  })\n\n  // 添加出站代理节点（第四列）\n  const outboundPositions = calculateYPositions(props.outboundProxies.length)\n  props.outboundProxies.forEach((proxy, index) => {\n    nodes.push({\n      id: `outbound-${proxy.id}`,\n      name: proxy.id,\n      symbolSize: 40,\n      category: 3,\n      value: proxy.enabled ? 1 : 0,\n      itemStyle: {\n        color: '#9C27B0' ,\n      },\n      x: 700,\n      y: outboundPositions[index],\n      fixed: true\n    })\n  })\n\n  // 连接用户组到路由方案\n  props.userGroups.forEach(group => {\n    const schemeNodeId = `scheme-${group.routeSchemeId}`\n    links.push({\n      source: `group-${group.id}`,\n      target: schemeNodeId, \n      value: 1\n    })\n  })\n\n  console.log('Generated nodes:', nodes)\n  console.log('Generated links:', links)\n\n  option.value.series[0].data = nodes\n  option.value.series[0].links = links\n}\n\nconst refreshGraph = () => {\n  generateGraphData()\n}\n\n// 监听窗口大小变化\nconst handleResize = () => {\n  console.log('Window resized, regenerating graph...')\n  generateGraphData()\n}\n\n// 组件挂载时添加窗口大小变化监听\nonMounted(() => {\n  window.addEventListener('resize', handleResize)\n  generateGraphData()\n})\n\n// 组件卸载时移除窗口大小变化监听\nonUnmounted(() => {\n  window.removeEventListener('resize', handleResize)\n})\n</script>\n\n<style scoped>\n.network-graph :deep(.el-card__header) {\n  background-color: var(--el-color-primary-light-9);\n}\n \n\nh3 {\n  margin: 0;\n}\n\n.chart {\n  height: 60vh;\n  width: 100%;\n}\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n/* 添加新的样式 */\n:deep(.el-card) {\n  height: 100%;\n}\n\n:deep(.el-card__header) {\n  padding: 12px 20px;\n  border-bottom: none;\n}\n\n</style> ","<template>\n  <div class=\"integrated-management\"> \n    <div  v-if=\"!loading.routes && !loading.groups && !loading.inbound && !loading.outbound\">\n          <network-graph\n            :inbound-proxies=\"inboundProxies\"\n            :outbound-proxies=\"outboundProxies\"\n            :user-groups=\"userGroups\"\n            :route-schemes=\"routeSchemes\"\n          />\n    </div>\n    <div class=\"network-graph-container\" v-else>\n      <el-empty description=\"数据加载中，请稍候...\" />\n    </div>  \n    <div class=\"main-tabs-container\">\n    <el-tabs v-model=\"activeTab\" class=\"management-tabs\">\n        <el-tab-pane label=\"入站代理\" name=\"inbound\" >\n            <el-table :data=\"inboundProxies\" style=\"width: 100%\" v-loading=\"loading.inbound\">\n              <el-table-column prop=\"id\" label=\"代理名称\" />\n              <el-table-column prop=\"scheme\" label=\"代理类型\"/>\n              <el-table-column prop=\"running\" label=\"运行状态\">\n                <template #default=\"{ row }\">\n                  <el-tag :type=\"row.running ? 'success' : 'danger'\">\n                    {{ row.running ? '运行中' : '已停止' }}\n                  </el-tag>\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"enabled\" label=\"启用\">\n                <template #default=\"{ row }\">\n                  <el-switch\n                    v-model=\"row.enabled\"\n                    @change=\"handleToggleProxyStatus(row, 'inbound')\"\n                  />\n                </template>\n              </el-table-column>\n              <el-table-column label=\"操作\" width=\"300\">\n                <template #header>\n                  <el-button type=\"primary\" @click=\"handleAddProxy('inbound')\" style=\"width: 70%;\">\n                    添加入站代理\n                  </el-button>\n                </template>\n                <template #default=\"{ row }\">\n                  <el-button-group>\n                    <el-button\n                      size=\"small\"\n                      type=\"success\"\n                      @click=\"handleGetLinkConfig(row)\"\n                    >\n                      获取连接配置\n                    </el-button>\n                    <el-button\n                      size=\"small\"\n                      type=\"primary\"\n                      @click=\"handleEditProxy(row, 'inbound')\"\n                    >\n                      编辑\n                    </el-button>\n                    <el-button\n                      size=\"small\"\n                      type=\"danger\"\n                      @click=\"handleDeleteProxy(row, 'inbound')\"\n                    >\n                      删除\n                    </el-button>\n                  </el-button-group>\n                </template>\n              </el-table-column>\n            </el-table>\n          </el-tab-pane>\n \n      <el-tab-pane label=\"用户管理\" name=\"user_manage\">\n        <el-tabs v-model=\"userTab\">\n          <!-- 入站代理 -->\n          <!-- 用户管理 -->\n      <el-tab-pane label=\"用户\" name=\"users\">\n        <el-table :data=\"users\" style=\"width: 100%\" v-loading=\"loading.users\">\n          <el-table-column prop=\"id\" label=\"用户名\" />\n          <el-table-column prop=\"email\" label=\"邮箱\" />\n          <el-table-column prop=\"userGroupId\" label=\"用户组\"/>\n          <el-table-column prop=\"enabled\" label=\"状态\">\n            <template #default=\"{ row }\">\n              <el-tag :type=\"row.enabled ? 'success' : 'danger'\">\n                {{ row.enabled ? '启用' : '禁用' }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"300\">\n            <template #header>\n              <el-button type=\"primary\" @click=\"handleAddUser\" style=\"width: 75%;\">\n                添加用户\n              </el-button>\n            </template>\n            <template #default=\"{ row }\">\n              <el-button-group>\n                <el-button\n                  size=\"small\"\n                  :type=\"row.enabled ? 'danger' : 'success'\"\n                  @click=\"handleToggleUserStatus(row)\"\n                >\n                  {{ row.enabled ? '禁用' : '启用' }}\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"primary\"\n                  @click=\"handleEditUser(row)\"\n                >\n                  编辑\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"warning\"\n                  @click=\"handleResetPassword(row)\"\n                >\n                  重置密码\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"danger\"\n                  @click=\"handleDeleteUser(row)\"\n                >\n                  删除\n                </el-button>\n              </el-button-group>\n            </template>\n          </el-table-column>\n          </el-table>\n          </el-tab-pane>\n<!-- 用户组管理 -->\n<el-tab-pane label=\"用户组\" name=\"groups\">\n        <el-table :data=\"userGroups\" v-loading=\"loading.groups\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"名称\" />\n          <el-table-column label=\"关联入站代理\">\n            <template #default=\"{ row }\">\n              <el-tag\n                v-for=\"proxyId in row.inboundProxyIds\"\n                :key=\"proxyId\"\n                class=\"mx-1\"\n                type=\"success\"\n                style=\"margin-right: 4px\"\n              >\n                {{ proxyId }}\n              </el-tag>\n              <span v-if=\"!row.inboundProxyIds || row.inboundProxyIds.length === 0\">无</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"路由方案\">\n            <template #default=\"{ row }\">\n              <el-tag type=\"info\">{{ row.routeSchemeId }}</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"用户数\">\n            <template #default=\"{ row }\">\n              <el-tag type=\"warning\">{{ row.userCount || 0 }}人</el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"200\">\n            <template #header>\n              <el-button type=\"primary\" @click=\"handleAddGroup\">添加用户组</el-button>\n            </template>\n            <template #default=\"{ row }\">\n              <el-button-group>\n                <el-button size=\"small\" @click=\"handleEditGroup(row)\">编辑</el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"danger\"\n                  @click=\"handleDeleteGroup(row)\"\n                >删除</el-button>\n              </el-button-group>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n          \n        </el-tabs>\n      </el-tab-pane>\n\n      \n\n      <!-- 路由管理 -->\n      <el-tab-pane label=\"路由管理\" name=\"routes\">\n        <el-table :data=\"routeSchemes\" v-loading=\"loading.routes\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"方案名称\" />\n          <el-table-column prop=\"description\" label=\"描述\" />\n          <el-table-column prop=\"enabled\" label=\"状态\">\n            <template #default=\"{ row }\">\n              <el-switch\n                v-model=\"row.enabled\"\n                @change=\"handleToggleScheme(row)\"\n              />\n            </template>\n          </el-table-column>\n          <el-table-column label=\"关联用户组\">\n            <template #default=\"{ row }\">\n              <el-tag\n                v-for=\"group in getSchemeUserGroups(row.id)\"\n                :key=\"group.id\"\n                class=\"mx-1\"\n                style=\"margin-right: 4px\"\n              >\n                {{ group.id }} ({{ group.userCount || 0 }})\n              </el-tag>\n              <span v-if=\"getSchemeUserGroups(row.id).length === 0\">无</span>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"300\">\n            <template #header>\n              <el-button type=\"primary\" @click=\"handleAddScheme\" style=\"width: 75%;\">\n                添加路由方案\n              </el-button>\n            </template>\n            <template #default=\"{ row }\">\n              <el-button-group>\n                <el-button\n                  size=\"small\"\n                  type=\"primary\"\n                  @click=\"handleViewRules(row)\"\n                >\n                  查看规则\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"success\"\n                  @click=\"handleEditScheme(row)\"\n                >\n                  编辑\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"info\"\n                  @click=\"handleCopyScheme(row)\"\n                >\n                  复制\n                </el-button>\n                <el-button\n                  size=\"small\"\n                  type=\"danger\"\n                  @click=\"handleDeleteScheme(row)\"\n                >\n                  删除\n                </el-button>\n              </el-button-group>\n            </template>\n          </el-table-column>\n        </el-table>\n      </el-tab-pane>\n      <!-- 出站代理 -->\n      <el-tab-pane label=\"出站代理\" name=\"outbound\">\n            <el-table :data=\"outboundProxies\" style=\"width: 100%\" v-loading=\"loading.outbound\">\n              <el-table-column prop=\"id\" label=\"代理名称\" />\n              <el-table-column prop=\"scheme\" label=\"代理类型\"/>\n              <el-table-column  label=\"延迟\" >\n                <template #default=\"{ row }\">\n                  <span v-if=\"row.latency !== undefined\">\n                    {{ row.latency }}\n                  </span>\n                  <span v-else>-</span>\n                </template>\n              </el-table-column>\n              <el-table-column label=\"操作\" width=\"250\">\n                <template #header>\n                  <el-button type=\"primary\" @click=\"handleAddProxy('outbound')\" style=\"width: 75%;\">\n                    添加出站代理\n                  </el-button>\n                </template>\n                <template #default=\"{ row }\">\n                  <el-button-group>\n                    <el-button\n                      size=\"small\"\n                      type=\"warning\"\n                      @click=\"handleTestLatency(row)\"\n                      :loading=\"row.testing\"\n                    >\n                      测试延迟\n                    </el-button>\n                    <el-button\n                      size=\"small\"\n                      type=\"primary\"\n                      @click=\"handleEditProxy(row, 'outbound')\"\n                    >\n                      编辑\n                    </el-button>\n                    <el-button\n                      size=\"small\"\n                      type=\"danger\"\n                      @click=\"handleDeleteProxy(row, 'outbound')\"\n                    >\n                      删除\n                    </el-button>\n                  </el-button-group>\n                </template>\n              </el-table-column>\n            </el-table>\n          </el-tab-pane>\n    </el-tabs>\n    </div>\n    \n\n    <!-- 用户对话框 -->\n    <el-dialog\n      v-model=\"userDialogVisible\"\n      :title=\"userDialogType === 'add' ? '添加用户' : '编辑用户'\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"userFormRef\"\n        :model=\"userForm\"\n        :rules=\"userRules\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"用户名\" prop=\"id\">\n          <el-input v-model=\"userForm.id\" :disabled=\"userDialogType === 'edit'\" />\n        </el-form-item>\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"userForm.email\" />\n        </el-form-item>\n        <el-form-item label=\"用户组\" prop=\"userGroupId\">\n          <el-select v-model=\"userForm.userGroupId\" placeholder=\"请选择用户组\">\n            <el-option \n              v-for=\"group in userGroups\" \n              :key=\"group.id\" \n              :label=\"group.id\" \n              :value=\"group.id\" \n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item\n          label=\"密码\"\n          prop=\"password\"\n          v-if=\"userDialogType === 'add'\"\n        >\n          <el-input\n            v-model=\"userForm.password\"\n            type=\"password\"\n            show-password\n            placeholder=\"请输入密码\"\n          />\n        </el-form-item>\n        <el-form-item label=\"状态\" prop=\"enabled\">\n          <el-switch v-model=\"userForm.enabled\" active-text=\"启用\" inactive-text=\"禁用\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"userDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitUser\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 代理对话框 -->\n    <el-dialog\n      v-model=\"proxyDialogVisible\"\n      :title=\"proxyDialogType === 'add' ? '添加代理' : '编辑代理'\"\n      width=\"500px\"\n    >\n      <el-tabs v-model=\"addMethod\" v-if=\"proxyDialogType === 'add'\">\n        <el-tab-pane label=\"JSON导入\" name=\"json\"></el-tab-pane>\n      </el-tabs>\n\n      <div v-if=\"addMethod === 'json' || proxyDialogType === 'edit'\">\n        <el-form ref=\"proxyFormRef\" :model=\"proxyForm\" :rules=\"proxyRules\">\n          <el-form-item label=\"名称\" prop=\"id\">\n            <el-input \n              v-model=\"proxyForm.id\" \n              type=\"textarea\"\n              :rows=\"1\"\n              :disabled=\"proxyDialogType === 'edit'\"\n              placeholder=\"请输入代理名称\"\n            />\n          </el-form-item>\n          <el-form-item label=\"配置\" prop=\"config\">\n            <el-input \n              v-model=\"proxyForm.config\" \n              type=\"textarea\"\n              :rows=\"10\"\n              placeholder=\"请输入JSON配置\"\n              @keydown.tab.prevent=\"handleTabKey\"\n              @keydown.shift.tab.prevent=\"handleShiftTabKey\"\n            />\n          </el-form-item>\n        </el-form>\n      </div>\n      \n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"proxyDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitProxy\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 用户组对话框 -->\n    <el-dialog\n      v-model=\"groupDialogVisible\"\n      :title=\"groupDialogType === 'add' ? '添加用户组' : '编辑用户组'\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"groupFormRef\"\n        :model=\"groupForm\"\n        :rules=\"groupRules\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"名称\" prop=\"id\">\n          <el-input v-model=\"groupForm.id\" :disabled=\"groupDialogType === 'edit'\" />\n        </el-form-item>\n        <el-form-item label=\"入站代理\" prop=\"inboundProxyIds\">\n          <el-select\n            v-model=\"groupForm.inboundProxyIds\"\n            multiple\n            placeholder=\"请选择入站代理\"\n          >\n            <el-option\n              v-for=\"proxy in inboundProxies\"\n              :key=\"proxy.id\"\n              :label=\"proxy.id\"\n              :value=\"proxy.id\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"路由方案\" prop=\"routeSchemeId\">\n          <el-select v-model=\"groupForm.routeSchemeId\" placeholder=\"请选择路由方案\">\n            <el-option\n              v-for=\"scheme in routeSchemes\"\n              :key=\"scheme.id\"\n              :label=\"scheme.id\"\n              :value=\"scheme.id\"\n            />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"groupDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitGroup\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 路由方案对话框 -->\n    <el-dialog\n      v-model=\"schemeDialogVisible\"\n      :title=\"schemeDialogType === 'add' ? '添加方案' : '编辑方案'\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"schemeFormRef\"\n        :model=\"schemeForm\"\n        :rules=\"schemeRules\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"方案名称\" prop=\"id\">\n          <el-input v-model=\"schemeForm.id\" :disabled=\"schemeDialogType === 'edit'\" />\n        </el-form-item>\n        <el-form-item label=\"描述\" prop=\"description\">\n          <el-input\n            v-model=\"schemeForm.description\"\n            type=\"textarea\"\n            :rows=\"3\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"schemeDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitScheme\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 规则列表对话框 -->\n    <el-dialog\n      v-model=\"rulesDialogVisible\"\n      :title=\"currentScheme?.id + ' - 路由规则'\"\n      width=\"800px\"\n    >\n      <div class=\"rules-header\">\n        <el-button type=\"primary\" @click=\"handleAddRule\">添加规则</el-button>\n      </div>\n      <el-table :data=\"currentScheme?.rules?.sort((a, b) => (a.priority || 0) - (b.priority || 0)) || []\" style=\"width: 100%\">\n        <el-table-column type=\"index\" label=\"序号\" width=\"80\" />\n        <el-table-column prop=\"name\" label=\"规则名称\" />\n        <el-table-column prop=\"type\" label=\"目的类型\">\n          <template #default=\"{ row }\">\n            <el-tag :type=\"getRuleTypeTag(row.type)\">\n              {{ getRuleTypeLabel(row.type) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"pattern\" label=\"匹配模式\" /> \n        <el-table-column prop=\"outbounds\" label=\"出站代理\">\n          <template #default=\"{ row }\">\n            <el-tag\n              v-for=\"outbound in row.outbounds\"\n              :key=\"outbound\"\n              class=\"mx-1\"\n              style=\"margin-right: 4px\"\n            >\n              {{ outbound }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"150\">\n          <template #default=\"{ row, $index }\">\n            <el-button-group>\n              <el-button\n                size=\"small\"\n                type=\"primary\"\n                @click=\"handleEditRule(row)\"\n              >\n                编辑\n              </el-button>\n              <el-button\n                size=\"small\"\n                type=\"danger\"\n                @click=\"handleDeleteRule(row)\"\n              >\n                删除\n              </el-button>\n              <el-button\n                size=\"small\"\n                :disabled=\"$index === 0\"\n                @click=\"handleMoveRule(row, 'up')\"\n              >\n                ↑\n              </el-button>\n              <el-button\n                size=\"small\"\n                :disabled=\"$index === (currentScheme?.rules.length || 0) - 1\"\n                @click=\"handleMoveRule(row, 'down')\"\n              >\n                ↓\n              </el-button>\n            </el-button-group>\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-dialog>\n\n    <!-- 规则编辑对话框 -->\n    <el-dialog\n      v-model=\"ruleDialogVisible\"\n      :title=\"ruleDialogType === 'add' ? '添加规则' : '编辑规则'\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"ruleFormRef\"\n        :model=\"ruleForm\"\n        :rules=\"ruleRules\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"规则名称\" prop=\"name\">\n          <el-input v-model=\"ruleForm.name\" />\n        </el-form-item>\n        <el-form-item label=\"目的类型\" prop=\"type\">\n          <el-select v-model=\"ruleForm.type\" placeholder=\"请选择目的类型\">\n            <el-option label=\"域名\" value=\"domain\" />\n            <el-option label=\"IP\" value=\"ip\" />\n            <el-option label=\"Geosite\" value=\"geosite\" />\n            <el-option label=\"任何\" value=\"any\" />\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"匹配模式\" prop=\"pattern\">\n          <el-input v-model=\"ruleForm.pattern\" />\n        </el-form-item>\n        <el-form-item label=\"出站代理\" prop=\"outbounds\">\n          <el-select\n            v-model=\"ruleForm.outbounds\"\n            multiple\n            placeholder=\"请选择出站代理\"\n          >\n            <el-option\n              v-for=\"proxy in outboundProxies\"\n              :key=\"proxy.id\"\n              :label=\"proxy.id\"\n              :value=\"proxy.id\"\n            />\n          </el-select>\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"ruleDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitRule\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n\n    <!-- 分享链接对话框 -->\n    <el-dialog\n      v-model=\"shareUrlDialogVisible\"\n      title=\"连接配置\"\n      width=\"500px\"\n    >\n      <div v-if=\"linkConfig\">\n        <el-input\n          readonly\n          :rows=\"10\"\n          type=\"textarea\"\n          v-model=\"linkConfig\"\n        > \n        </el-input>\n        \n        <el-button @click=\"copyLinkConfig\" type=\"primary\" style=\"width: 100%;\">复制</el-button>\n        <div class=\"qrcode-container\" v-if=\"linkConfig\">\n          <el-image :src=\"getQrCodeUrl(linkConfig)\" fit=\"contain\" style=\"width: 200px; height: 200px;\" />\n        </div>\n      </div>\n      <div v-else>\n        <el-empty description=\"获取链接失败\" />\n      </div>\n    </el-dialog>\n\n    <!-- 复制路由方案对话框 -->\n    <el-dialog\n      v-model=\"copySchemeDialogVisible\"\n      title=\"复制路由方案\"\n      width=\"500px\"\n    >\n      <el-form\n        ref=\"copySchemeFormRef\"\n        :model=\"copySchemeForm\"\n        :rules=\"schemeRules\"\n        label-width=\"100px\"\n      >\n        <el-form-item label=\"方案名称\" prop=\"id\">\n          <el-input v-model=\"copySchemeForm.id\" />\n        </el-form-item>\n        <el-form-item label=\"描述\" prop=\"description\">\n          <el-input\n            v-model=\"copySchemeForm.description\"\n            type=\"textarea\"\n            :rows=\"3\"\n          />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"copySchemeDialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"handleSubmitCopyScheme\">\n            确定\n          </el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, reactive, onMounted, watch, nextTick } from 'vue'\nimport type { FormInstance } from 'element-plus'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { userApi, proxyApi, userGroupApi, routeApi } from '../api/api'\nimport type { \n  User, \n  UserGroup, \n  InboundProxy, \n  OutboundProxy, \n  RouteScheme,\n  RouteRule,\n  CreateRuleRequest\n} from '../api/apiTypes'\nimport NetworkGraph from '../components/NetworkGraph.vue'\n\n// 主标签页\nconst activeTab = ref('inbound') \nconst userTab = ref('users')\n// 加载状态\nconst loading = reactive({\n  users: true,\n  inbound: true,\n  outbound: true,\n  groups: true,\n  routes: true\n})\n\n// 数据\nconst users = ref<User[]>([])\nconst inboundProxies = ref<InboundProxy[]>([])\nconst outboundProxies = ref<OutboundProxy[]>([])\nconst userGroups = ref<UserGroup[]>([])\nconst routeSchemes = ref<RouteScheme[]>([])\nconst currentScheme = ref<RouteScheme | null>(null)\n\n// 对话框相关\nconst userDialogVisible = ref(false)\nconst userDialogType = ref<'add' | 'edit'>('add')\nconst userFormRef = ref<FormInstance>()\nconst currentUser = ref<User | null>(null)\n\nconst proxyDialogVisible = ref(false)\nconst proxyDialogType = ref<'add' | 'edit'>('add')\nconst proxyFormRef = ref<FormInstance>()\nconst currentProxy = ref<InboundProxy | OutboundProxy | null>(null)\nconst addMethod = ref<'json'>('json')\n\nconst groupDialogVisible = ref(false)\nconst groupDialogType = ref<'add' | 'edit'>('add')\nconst groupFormRef = ref<FormInstance>()\nconst currentGroup = ref<UserGroup | null>(null)\n\nconst schemeDialogVisible = ref(false)\nconst schemeDialogType = ref<'add' | 'edit'>('add')\nconst schemeFormRef = ref<FormInstance>()\nconst currentSchemeForEdit = ref<RouteScheme | null>(null)\n\nconst rulesDialogVisible = ref(false)\nconst ruleDialogVisible = ref(false)\nconst ruleDialogType = ref<'add' | 'edit'>('add')\nconst ruleFormRef = ref<FormInstance>()\nconst currentRule = ref<RouteRule | null>(null)\n\nconst shareUrlDialogVisible = ref(false)\nconst linkConfig = ref('')\n\n// 添加新的响应式变量\nconst copySchemeDialogVisible = ref(false)\nconst copySchemeForm = reactive({\n  id: '',\n  description: ''\n})\n\n// 表单数据\nconst userForm = reactive({\n  id: '',\n  email: '',\n  userGroupId: '',\n  password: '',\n  enabled: true\n})\n\nconst proxyForm = reactive({\n  id: '',\n  config: ''\n})\n\nconst groupForm = reactive({\n  id: '',\n  inboundProxyIds: [] as string[],\n  routeSchemeId: ''\n})\n\nconst schemeForm = reactive({\n  id: '',\n  description: '',\n  enabled: true\n})\n\nconst ruleForm = reactive<CreateRuleRequest>({\n  name: '',\n  type: 'domain',\n  pattern: '',\n  priority: 0,\n  outbounds: [],\n  enabled: true\n})\n\n// 表单规则\nconst userRules = {\n  id: [\n    { required: true, message: '请输入用户名', trigger: 'blur' },\n    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\n  ],\n  email: [\n    { required: true, message: '请输入邮箱地址', trigger: 'blur' },\n    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\n  ],\n  userGroupId: [{ required: true, message: '请选择用户组', trigger: 'change' }],\n  password: [\n    { required: true, message: '请输入密码', trigger: 'blur' },\n    { min: 6, message: '密码长度不能小于6位', trigger: 'blur' }\n  ],\n  enabled: [{ required: true, message: '请选择状态', trigger: 'change' }]\n}\n\nconst proxyRules = {\n  id: [{ required: true, message: '请输入代理名称', trigger: 'blur' }],\n  config: [{ required: true, message: '请输入配置', trigger: 'blur' }]\n}\n\nconst groupRules = {\n  id: [{ required: true, message: '请输入用户组名称', trigger: 'blur' }],\n  inboundProxyIds: [{ required: true, message: '请选择入站代理', trigger: 'change' }],\n  routeSchemeId: [{ required: true, message: '请选择路由方案', trigger: 'change' }]\n}\n\nconst schemeRules = {\n  id: [{ required: true, message: '请输入方案名称', trigger: 'blur' }],\n  description: [{ required: true, message: '请输入描述', trigger: 'blur' }]\n}\n\nconst ruleRules = {\n  name: [{ required: true, message: '请输入规则名称', trigger: 'blur' }],\n  type: [{ required: true, message: '请选择目的类型', trigger: 'change' }],\n  pattern: [{ required: true, message: '请输入匹配模式', trigger: 'blur' }],\n  outbounds: [{ required: true, message: '请选择出站代理', trigger: 'change' }]\n}\n\n// 初始化\nonMounted(async () => {\n  await Promise.all([\n    fetchUsers(),\n    fetchInboundProxies(),\n    fetchOutboundProxies(),\n    fetchUserGroups(),\n    fetchRouteSchemes()\n  ])\n})\n\n// 获取数据\nconst fetchUsers = async () => { \n  try {\n    users.value = await userApi.getUsers()\n  } catch (error) {\n    ElMessage.error('获取用户列表失败')\n    console.error(error)\n  } finally {\n    loading.users = false\n  }\n}\n\nconst fetchInboundProxies = async () => { \n  try {\n    inboundProxies.value = await proxyApi.getInboundProxies()\n  } catch (error) {\n    ElMessage.error('获取入站代理列表失败')\n    console.error(error)\n  } finally {\n    loading.inbound = false\n  }\n}\n\nconst fetchOutboundProxies = async () => { \n  try {\n    outboundProxies.value = await proxyApi.getOutboundProxies()\n  } catch (error) {\n    ElMessage.error('获取出站代理列表失败')\n    console.error(error)\n  } finally {\n    loading.outbound = false\n  }\n}\n\nconst fetchUserGroups = async () => { \n  try {\n    userGroups.value = await userGroupApi.getUserGroups()\n  } catch (error) {\n    ElMessage.error('获取用户组列表失败')\n    console.error(error)\n  } finally {\n    loading.groups = false\n  }\n}\n\nconst fetchRouteSchemes = async () => { \n  try {\n    routeSchemes.value = await routeApi.getRouteSchemes()\n  } catch (error) {\n    ElMessage.error('获取路由方案列表失败')\n    console.error(error)\n  } finally {\n    loading.routes = false\n  }\n}\n\n// 用户相关方法\nconst handleAddUser = () => {\n  userDialogType.value = 'add'\n  Object.assign(userForm, {\n    id: '',\n    email: '',\n    userGroupId: '',\n    password: '',\n    enabled: true\n  })\n  userDialogVisible.value = true\n}\n\nconst handleEditUser = (user: User) => {\n  userDialogType.value = 'edit'\n  currentUser.value = user\n  Object.assign(userForm, {\n    id: user.id,\n    email: user.email,\n    userGroupId: user.userGroupId,\n    enabled: user.enabled\n  })\n  userDialogVisible.value = true\n}\n\nconst handleToggleUserStatus = async (user: User) => {\n  try {\n    user.enabled = !user.enabled\n    const updatedUser = await userApi.updateUser(user.id, user)\n    if (updatedUser) {\n      ElMessage.success('状态更新成功')\n      await fetchUsers()\n    } else {\n      ElMessage.error('状态更新失败')\n    }\n  } catch (error) {\n    ElMessage.error('状态更新失败')\n    console.error(error)\n  }\n}\n\nconst handleResetPassword = async (user: User) => {\n  try {\n    await ElMessageBox.confirm('确定要重置该用户的密码吗？', '提示', {\n      type: 'warning'\n    })\n    \n    const success = await userApi.resetPassword(user.id)\n    if (success) {\n      ElMessage.success('密码重置为用户名')\n    } else {\n      ElMessage.error('密码重置失败')\n    }\n  } catch {\n    // 用户取消操作\n  }\n}\n\nconst handleDeleteUser = async (user: User) => {\n  try {\n    await ElMessageBox.confirm('确定要删除该用户吗？', '提示', {\n      type: 'warning'\n    })\n    \n    const success = await userApi.deleteUser(user.id)\n    if (success) {\n      ElMessage.success('删除成功')\n      await fetchUsers()\n    } else {\n      ElMessage.error('删除失败')\n    }\n  } catch {\n    // 用户取消删除\n  }\n}\n\nconst handleSubmitUser = async () => {\n  if (!userFormRef.value) return\n  \n  await userFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (userDialogType.value === 'add') {\n          const success = await userApi.createUser(userForm)\n          if (success) {\n            ElMessage.success('添加成功')\n            userDialogVisible.value = false\n            await fetchUsers()\n          } else {\n            ElMessage.error('添加失败')\n          }\n        } else {\n          const success = await userApi.updateUser(userForm.id, userForm)\n          if (success) {\n            ElMessage.success('更新成功')\n            userDialogVisible.value = false\n            await fetchUsers()\n          } else {\n            ElMessage.error('更新失败')\n          }\n        }\n      } catch (error) {\n        ElMessage.error(userDialogType.value === 'add' ? '添加失败' : '更新失败')\n        console.error(error)\n      }\n    }\n  })\n}\n\n// 代理相关方法\nconst handleAddProxy = (type: 'inbound' | 'outbound') => {\n  proxyDialogType.value = 'add'\n  Object.assign(proxyForm, {\n    id: '',\n    config: ''\n  })\n  proxyDialogVisible.value = true\n}\n\nconst handleEditProxy = (proxy: InboundProxy | OutboundProxy, type: 'inbound' | 'outbound') => {\n  proxyDialogType.value = 'edit'\n  currentProxy.value = proxy\n  Object.assign(proxyForm, {\n    id: proxy.id,\n    config: typeof proxy.config === 'string' ? proxy.config : JSON.stringify(proxy.config, null, 2)\n  })\n  proxyDialogVisible.value = true\n}\n\nconst handleToggleProxyStatus = async (proxy: InboundProxy | OutboundProxy, type: 'inbound' | 'outbound') => {\n  try { \n    let success\n    if (type === \"inbound\") {\n      success = await proxyApi.updateInboundProxy(proxy.id, proxy)\n    } else {\n      success = await proxyApi.updateOutboundProxy(proxy.id, proxy)\n    }\n    if (success) {\n      ElMessage.success('状态更新成功')\n      if (type === 'inbound') {\n        await fetchInboundProxies()\n      } else {\n        await fetchOutboundProxies()\n      }\n    } else {\n      proxy.enabled = !proxy.enabled\n      ElMessage.error('状态更新失败')\n    }\n  } catch (error) {\n    proxy.enabled = !proxy.enabled\n    ElMessage.error('状态更新失败')\n    console.error(error)\n  }\n}\n\nconst handleDeleteProxy = async (proxy: InboundProxy | OutboundProxy, type: 'inbound' | 'outbound') => {\n  try {\n    await ElMessageBox.confirm('确定要删除该代理吗？', '提示', {\n      type: 'warning'\n    })\n    let success\n    if (type === \"inbound\") {\n      success = await proxyApi.deleteInboundProxy(proxy.id)\n    } else {\n      success = await proxyApi.deleteOutboundProxy(proxy.id)\n    }   \n    if (success) {\n      ElMessage.success('删除成功')\n      if (type === 'inbound') {\n        await fetchInboundProxies()\n      } else {\n        await fetchOutboundProxies()\n      }\n    } else {\n      ElMessage.error('删除失败')\n    }\n  } catch {\n    // 用户取消删除\n  }\n}\n\nconst handleTestLatency = async (proxy: OutboundProxy) => {\n  try {\n    proxy.testing = true\n    const result = await proxyApi.testOutboundProxySpeed(proxy.id)\n    proxy.latency = result.latency\n    ElMessage.success(`延迟测试完成：${result.latency}`)\n  } catch (error) {\n    ElMessage.error('延迟测试失败')\n    console.error(error)\n  } finally {\n    proxy.testing = false\n  }\n}\n\nconst handleGetLinkConfig = async (proxy: InboundProxy) => {\n  try {  \n    linkConfig.value = proxy.linkConfig || '' \n    shareUrlDialogVisible.value = true\n  } catch (error) {\n    ElMessage.error('获取连接配置失败')\n    console.error(error)\n  }\n}\n\nconst copyLinkConfig = () => {\n  navigator.clipboard.writeText(linkConfig.value)\n  ElMessage.success('连接配置已复制到剪贴板')\n}\n\nconst getQrCodeUrl = (url: string) => {\n  return `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(url)}`\n}\n\nconst handleSubmitProxy = async () => {\n  if (!proxyFormRef.value) return\n  \n  await proxyFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        JSON.parse(proxyForm.config)\n        let config = proxyForm.config\n        \n        if (proxyDialogType.value === 'add') {\n          let success\n          if (activeTab.value === \"inbound\") {\n            success = await proxyApi.createInboundProxy({\n              id: proxyForm.id,\n              enabled: true, \n              config:config\n            })\n          } else {\n            success = await proxyApi.createOutboundProxy({\n              id: proxyForm.id,\n              enabled: true, \n              config:config\n            })\n          }\n          if (success) {\n            ElMessage.success('添加成功')\n            proxyDialogVisible.value = false\n            await Promise.all([fetchInboundProxies(), fetchOutboundProxies()])\n          } else {\n            ElMessage.error('添加失败')\n          }\n        } else {\n          let success\n\n          if (activeTab.value === \"inbound\") {\n            success = await proxyApi.updateInboundProxy(proxyForm.id, { \n              enabled: currentProxy.value?.enabled, \n              config:config\n            })\n          } else {\n            success = await proxyApi.updateOutboundProxy(proxyForm.id, { \n              enabled: currentProxy.value?.enabled , \n              config:config\n            })\n          }\n          if (success) {\n            ElMessage.success('更新成功')\n            proxyDialogVisible.value = false\n            await Promise.all([fetchInboundProxies(), fetchOutboundProxies()])\n          } else {\n            ElMessage.error('更新失败')\n          }\n        }\n      } catch (error) {\n        ElMessage.error('配置格式错误')\n        console.error(error)\n      }\n    }\n  })\n}\n\n// 用户组相关方法\nconst handleAddGroup = () => {\n  groupDialogType.value = 'add'\n  Object.assign(groupForm, {\n    id: '',\n    inboundProxyIds: [],\n    routeSchemeId: ''\n  })\n  groupDialogVisible.value = true\n}\n\nconst handleEditGroup = (group: UserGroup) => {\n  groupDialogType.value = 'edit'\n  currentGroup.value = group\n  Object.assign(groupForm, {\n    id: group.id,\n    inboundProxyIds: group.inboundProxyIds,\n    routeSchemeId: group.routeSchemeId\n  })\n  groupDialogVisible.value = true\n}\n\nconst handleDeleteGroup = async (group: UserGroup) => {\n  try {\n    await ElMessageBox.confirm('确定要删除该用户组吗？', '提示', {\n      type: 'warning'\n    })\n    \n    const success = await userGroupApi.deleteUserGroup(group.id)\n    if (success) {\n      ElMessage.success('删除成功')\n      await fetchUserGroups()\n    } else {\n      ElMessage.error('删除失败')\n    }\n  } catch {\n    // 用户取消删除\n  }\n}\n\nconst handleSubmitGroup = async () => {\n  if (!groupFormRef.value) return\n  \n  await groupFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (groupDialogType.value === 'add') {\n          const success = await userGroupApi.createUserGroup(groupForm)\n          if (success) {\n            ElMessage.success('添加成功')\n            groupDialogVisible.value = false\n            await fetchUserGroups()\n          } else {\n            ElMessage.error('添加失败')\n          }\n        } else {\n          const success = await userGroupApi.updateUserGroup(groupForm.id, groupForm)\n          if (success) {\n            ElMessage.success('更新成功')\n            groupDialogVisible.value = false\n            await fetchUserGroups()\n          } else {\n            ElMessage.error('更新失败')\n          }\n        }\n      } catch (error) {\n        ElMessage.error(groupDialogType.value === 'add' ? '添加失败' : '更新失败')\n        console.error(error)\n      }\n    }\n  })\n}\n\n// 路由方案相关方法\nconst handleAddScheme = () => {\n  schemeDialogType.value = 'add'\n  Object.assign(schemeForm, {\n    id: '',\n    description: '',\n    enabled: true\n  })\n  schemeDialogVisible.value = true\n}\n\nconst handleEditScheme = (scheme: RouteScheme) => {\n  schemeDialogType.value = 'edit'\n  currentSchemeForEdit.value = scheme\n  Object.assign(schemeForm, {\n    id: scheme.id,\n    description: scheme.description,\n    enabled: scheme.enabled\n  })\n  schemeDialogVisible.value = true\n}\n\nconst handleCopyScheme = (scheme: RouteScheme) => {\n  currentSchemeForEdit.value = scheme\n  copySchemeForm.id = `${scheme.id} 副本`\n  copySchemeForm.description = `${scheme.description || ''} (复制于 ${scheme.id})`\n  copySchemeDialogVisible.value = true\n}\n\nconst handleSubmitCopyScheme = async () => {\n  if (!currentSchemeForEdit.value) return\n  \n  try {\n    const newScheme = await routeApi.createRouteScheme({\n      id: copySchemeForm.id,\n      description: copySchemeForm.description,\n      enabled: false\n    })\n    \n    const rules = await routeApi.getRules(currentSchemeForEdit.value.id)\n    if (rules && rules.length > 0) {\n      for (const rule of rules) {\n        await routeApi.addRule(newScheme.id, {\n          name: rule.name,\n          type: rule.type,\n          pattern: rule.pattern,\n          priority: rule.priority || 0,\n          outbounds: rule.outbounds,\n          enabled: rule.enabled || true\n        })\n      }\n    }\n    \n    ElMessage.success('复制方案成功')\n    copySchemeDialogVisible.value = false\n    await fetchRouteSchemes()\n  } catch (error) {\n    console.error('复制方案失败', error)\n    ElMessage.error('复制方案失败')\n  }\n}\n\nconst handleDeleteScheme = async (scheme: RouteScheme) => {\n  try {\n    await ElMessageBox.confirm('确定要删除该路由方案吗？', '提示', {\n      type: 'warning'\n    })\n    await routeApi.deleteRouteScheme(scheme.id)\n    ElMessage.success('删除成功')\n    await fetchRouteSchemes()\n  } catch (error) {\n    console.error('删除路由方案失败', error)\n    ElMessage.error('删除路由方案失败')\n  }\n}\n\nconst handleToggleScheme = async (scheme: RouteScheme) => {\n  try { \n    await routeApi.updateRouteScheme(scheme.id, {\n      enabled: scheme.enabled\n    }) \n    ElMessage.success('更新成功')\n    await fetchRouteSchemes()\n  } catch (error) {\n    scheme.enabled = !scheme.enabled\n    console.error('更新路由方案状态失败', error)\n    ElMessage.error('更新路由方案状态失败')\n  }\n}\n\nconst handleSubmitScheme = async () => {\n  if (!schemeFormRef.value) return\n  \n  await schemeFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (schemeDialogType.value === 'add') {\n          await routeApi.createRouteScheme(schemeForm)\n          ElMessage.success('添加成功')\n        } else {\n          await routeApi.updateRouteScheme(schemeForm.id,schemeForm)\n          ElMessage.success('更新成功')\n        }\n        schemeDialogVisible.value = false\n        await fetchRouteSchemes()\n      } catch (error) {\n        console.error('保存路由方案失败', error)\n        ElMessage.error('保存路由方案失败')\n      }\n    }\n  })\n}\n\n// 路由规则相关方法\nconst handleViewRules = (scheme: RouteScheme) => {\n  currentScheme.value = scheme\n  rulesDialogVisible.value = true\n}\n\nconst handleAddRule = () => {\n  ruleDialogType.value = 'add'\n  Object.assign(ruleForm, {\n    name: '',\n    type: 'domain',\n    pattern: '',\n    priority: 0,\n    outbounds: [],\n    enabled: true\n  })\n  ruleDialogVisible.value = true\n}\n\nconst handleEditRule = (rule: RouteRule) => {\n  ruleDialogType.value = 'edit'\n  currentRule.value = rule\n  Object.assign(ruleForm, {\n    name: rule.name,\n    type: rule.type,\n    pattern: rule.pattern,\n    priority: rule.priority,\n    outbounds: rule.outbounds,\n    enabled: rule.enabled\n  })\n  ruleDialogVisible.value = true\n}\n\nconst handleDeleteRule = async (rule: RouteRule) => {\n  try {\n    await ElMessageBox.confirm('确定要删除该规则吗？', '提示', {\n      type: 'warning'\n    })\n    \n    if (!currentScheme.value) return\n    \n    await routeApi.deleteRule(currentScheme.value.id, rule.id)\n    ElMessage.success('删除成功')\n    await fetchRouteSchemes()\n    currentScheme.value = routeSchemes.value.find(s => s.id === currentScheme.value?.id) || null\n  } catch (error) {\n    console.error('删除规则失败', error)\n    ElMessage.error('删除规则失败')\n  }\n}\n\nconst handleMoveRule = async (rule: RouteRule, direction: 'up' | 'down') => {\n  if (!currentScheme.value) return\n  \n  const rules = currentScheme.value.rules\n  const index = rules.findIndex(r => r.id === rule.id)\n  \n  if (direction === 'up' && index > 0) {\n    [rules[index], rules[index - 1]] = [rules[index - 1], rules[index]]\n  } else if (direction === 'down' && index < rules.length - 1) {\n    [rules[index], rules[index + 1]] = [rules[index + 1], rules[index]]\n  }\n  \n  try {\n    const ruleIds = rules.map(r => r.id)\n    await routeApi.updateRuleOrder(currentScheme.value.id, ruleIds)\n    ElMessage.success('规则顺序更新成功')\n    await fetchRouteSchemes()\n    currentScheme.value = routeSchemes.value.find(s => s.id === currentScheme.value?.id) || null\n  } catch (error) {\n    console.error('更新规则顺序失败', error)\n    ElMessage.error('更新规则顺序失败')\n  }\n}\n\nconst handleSubmitRule = async () => {\n  if (!ruleFormRef.value || !currentScheme.value) return\n  \n  await ruleFormRef.value.validate(async (valid) => {\n    if (valid) {\n      try {\n        if (ruleDialogType.value === 'add') {\n          await routeApi.addRule(currentScheme.value.id, ruleForm)\n          ElMessage.success('添加成功')\n        } else if (currentRule.value) {\n          await routeApi.updateRule(currentScheme.value.id, currentRule.value.id, {\n            id: currentRule.value.id,\n            name: ruleForm.name,\n            type: ruleForm.type,\n            pattern: ruleForm.pattern,\n            priority: ruleForm.priority,\n            outbounds: ruleForm.outbounds,\n            enabled: ruleForm.enabled\n          })\n          ElMessage.success('更新成功')\n        }\n        ruleDialogVisible.value = false\n        await fetchRouteSchemes()\n        currentScheme.value = routeSchemes.value.find(s => s.id === currentScheme.value?.id) || null\n      } catch (error) {\n        console.error('保存规则失败', error)\n        ElMessage.error('保存规则失败')\n      }\n    }\n  })\n}\n\n// 工具方法\nconst getSchemeUserGroups = (schemeId: string) => {\n  return userGroups.value.filter(group => group.routeSchemeId === schemeId)\n}\n\nconst getRuleTypeTag = (type: string) => {\n  const map: Record<string, string> = {\n    domain: 'success',\n    ip: 'warning',\n    geosite: 'info',\n    any: 'danger'\n  }\n  return map[type] || 'info'\n}\n\nconst getRuleTypeLabel = (type: string) => {\n  const map: Record<string, string> = {\n    domain: '域名',\n    ip: 'IP',\n    geosite: 'Geosite',\n    any: '任何'\n  }\n  return map[type] || type\n}\n\n// 在 script setup 部分添加处理 Tab 键的方法\nconst handleTabKey = (e: KeyboardEvent) => {\n  const textarea = e.target as HTMLTextAreaElement\n  const start = textarea.selectionStart\n  const end = textarea.selectionEnd\n  \n  proxyForm.config = proxyForm.config.substring(0, start) + '    ' + proxyForm.config.substring(end)\n  \n  // 将光标移动到插入的制表符后面\n  nextTick(() => {\n    textarea.selectionStart = textarea.selectionEnd = start + 4\n  })\n}\n\nconst handleShiftTabKey = (e: KeyboardEvent) => {\n  const textarea = e.target as HTMLTextAreaElement\n  const start = textarea.selectionStart\n  const end = textarea.selectionEnd\n  \n  // 获取当前行的开始位置\n  const beforeCursor = proxyForm.config.substring(0, start)\n  const lines = beforeCursor.split('\\n')\n  const currentLineStart = start - lines[lines.length - 1].length\n  \n  // 检查当前行前面是否有4个空格\n  const beforeSpaces = proxyForm.config.substring(currentLineStart, start).match(/^    /)\n  if (beforeSpaces) {\n    proxyForm.config = proxyForm.config.substring(0, currentLineStart) + proxyForm.config.substring(start)\n    \n    // 将光标移动到删除空格后的位置\n    nextTick(() => {\n      textarea.selectionStart = textarea.selectionEnd = currentLineStart\n    })\n  }\n}\n\n</script>\n\n<style scoped>\n.integrated-management  {\n  padding: 10px;\n}\n.integrated-management :deep(.el-tabs__header) {\n  margin-bottom: 0px;\n}\n\n.management-tabs {\n  background: #fff; \n  border-radius: 2px;\n  border: 1px solid #e0e0e0;\n}\n \n.management-tabs :deep(.el-tabs__nav) {\n  width: 100%;\n}\n\n.management-tabs :deep(.el-tabs__item) {\n  flex: 1;\n  text-align: center;\n  height: 40px;\n  line-height: 40px;\n  font-size: 14px;\n  color: #606266;\n  transition: color 0.3s;\n}\n\n.management-tabs :deep(.el-tabs__item.is-active) {\n  color: #409EFF;\n  font-weight: 500;\n}\n\n.management-tabs :deep(.el-tabs__active-bar) {\n  height: 2px;\n  border-radius: 2px;\n}\n \n.rules-header {\n  margin-bottom: 20px;\n}\n\n.qrcode-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.network-graph-container  { \n  background: #fff;  \n}\n\n.main-tabs-container {  \n    margin-top: 10px;\n    min-height: 60vh;\n}\n\n</style> "],"names":["use","CanvasRenderer","GraphChart","TitleComponent","TooltipComponent","LegendComponent","props","__props","option","ref","params","watch","nextTick","generateGraphData","nodes","links","chart_width","totalHeight","max_node_count","spacing","calculateYPositions","count","positions","node_range","startY","i","inboundPositions","proxy","index","groupPositions","group","groupNodeId","proxyId","schemePositions","scheme","schemeNodeId","_a","rule","outboundPositions","refreshGraph","handleResize","onMounted","onUnmounted","activeTab","userTab","loading","reactive","users","inboundProxies","outboundProxies","userGroups","routeSchemes","currentScheme","userDialogVisible","userDialogType","userFormRef","currentUser","proxyDialogVisible","proxyDialogType","proxyFormRef","currentProxy","addMethod","groupDialogVisible","groupDialogType","groupFormRef","currentGroup","schemeDialogVisible","schemeDialogType","schemeFormRef","currentSchemeForEdit","rulesDialogVisible","ruleDialogVisible","ruleDialogType","ruleFormRef","currentRule","shareUrlDialogVisible","linkConfig","copySchemeDialogVisible","copySchemeForm","userForm","proxyForm","groupForm","schemeForm","ruleForm","userRules","proxyRules","groupRules","schemeRules","ruleRules","fetchUsers","fetchInboundProxies","fetchOutboundProxies","fetchUserGroups","fetchRouteSchemes","userApi","error","ElMessage","proxyApi","userGroupApi","routeApi","handleAddUser","handleEditUser","user","handleToggleUserStatus","handleResetPassword","ElMessageBox","handleDeleteUser","handleSubmitUser","valid","handleAddProxy","type","handleEditProxy","handleToggleProxyStatus","success","handleDeleteProxy","handleTestLatency","result","handleGetLinkConfig","copyLinkConfig","getQrCodeUrl","url","handleSubmitProxy","config","_b","handleAddGroup","handleEditGroup","handleDeleteGroup","handleSubmitGroup","handleAddScheme","handleEditScheme","handleCopyScheme","handleSubmitCopyScheme","newScheme","rules","handleDeleteScheme","handleToggleScheme","handleSubmitScheme","handleViewRules","handleAddRule","handleEditRule","handleDeleteRule","s","handleMoveRule","direction","r","ruleIds","handleSubmitRule","getSchemeUserGroups","schemeId","getRuleTypeTag","getRuleTypeLabel","handleTabKey","e","textarea","start","end","handleShiftTabKey","lines","currentLineStart"],"mappings":"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"}